<Events startTimestamp="1601568296309" logVersion="1.0.0.202009141527">
  <Command __id="83" _type="EclipseCommand" commandID="" date="Thu Oct 01 13:27:23 EDT 2020" starttimestamp="1601568296309" timestamp="4947649" />
  <Command __id="84" _type="EclipseCommand" commandID="" date="Thu Oct 01 13:27:23 EDT 2020" starttimestamp="1601568296309" timestamp="4947651" />
  <Command __id="85" _type="EclipseCommand" commandID="" date="Thu Oct 01 13:27:23 EDT 2020" starttimestamp="1601568296309" timestamp="4947654" />
  <Command __id="67" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 12:57:00 EDT 2020" docASTNodeCount="1" docActiveCodeLength="364" docExpressionCount="0" docLength="364" projectName="SocialDistance" starttimestamp="1601568296309" timestamp="3124243">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment_2\SocialDistance\src\SocialDistance.pl]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"givenSafe(Distance,Duration,Exhalation) :-¶		Dist = 6, Durat = 30, Exhal = 10;¶		Dist = 27, Durat = 30, Exhal = 50;¶		Dist = 13, Durat = 15, Exhal = 50;¶		Dist = 13, Durat = 120, Exhal = 10;¶		Dist = 27, Durat = 120, Exhal = 30;¶		Dist = 6, Durat = 15, Exhal = 30;¶		Dist = 13, Durat = 30, Exhal = 30.¶		¶derivedSafe(Distance, Duration, Exhalation) :-¶		"), Diff(DELETE,"givenSafe(Dist,Durat,Exhal),¶		Distance > Dist;¶		Duration < Durat;¶		Exhalation < Exhal.¶		")]]]></diff>
    <snapshot><![CDATA[givenSafe(Distance,Duration,Exhalation) :-
		Dist = 6, Durat = 30, Exhal = 10;
		Dist = 27, Durat = 30, Exhal = 50;
		Dist = 13, Durat = 15, Exhal = 50;
		Dist = 13, Durat = 120, Exhal = 10;
		Dist = 27, Durat = 120, Exhal = 30;
		Dist = 6, Durat = 15, Exhal = 30;
		Dist = 13, Durat = 30, Exhal = 30.
		
derivedSafe(Distance, Duration, Exhalation) :-
		]]></snapshot>
  </Command>
  <Command __id="88" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:29:47 EDT 2020" docASTNodeCount="1" docActiveCodeLength="383" docExpressionCount="0" docLength="383" projectName="SocialDistance" starttimestamp="1601568296309" timestamp="5091087">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment_2\SocialDistance\src\SocialDistance.pl]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"givenSafe(Distance,Duration,Exhalation) :-¶		Dist = 6, Durat = 30, Exhal = 10;¶		Dist = 27, Durat = 30, Exhal = 50;¶		Dist = 13, Durat = 15, Exhal = 50;¶		Dist = 13, Durat = 120, Exhal = 10;¶		Dist = 27, Durat = 120, Exhal = 30;¶		Dist = 6, Durat = 15, Exhal = 30;¶		Dist = 13, Durat = 30, Exhal = 30.¶		¶derivedSafe(Distance, Duration, Exhalation) :-¶		"), Diff(INSERT,"givenSafe(6,30,¶		")]]]></diff>
    <snapshot><![CDATA[givenSafe(Distance,Duration,Exhalation) :-
		Dist = 6, Durat = 30, Exhal = 10;
		Dist = 27, Durat = 30, Exhal = 50;
		Dist = 13, Durat = 15, Exhal = 50;
		Dist = 13, Durat = 120, Exhal = 10;
		Dist = 27, Durat = 120, Exhal = 30;
		Dist = 6, Durat = 15, Exhal = 30;
		Dist = 13, Durat = 30, Exhal = 30.
		
derivedSafe(Distance, Duration, Exhalation) :-
		givenSafe(6,30,
		]]></snapshot>
  </Command>
  <Command __id="87" _type="ShellCommand" date="Thu Oct 01 13:29:47 EDT 2020" starttimestamp="1601568296309" timestamp="5091049" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="90" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:29:53 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5097238" />
  <Command __id="91" _type="ShellCommand" date="Thu Oct 01 13:30:51 EDT 2020" starttimestamp="1601568296309" timestamp="5155428" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="92" _type="ShellCommand" date="Thu Oct 01 13:31:23 EDT 2020" starttimestamp="1601568296309" timestamp="5187324" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="93" _type="ShellCommand" date="Thu Oct 01 13:31:24 EDT 2020" starttimestamp="1601568296309" timestamp="5187971" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="89" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:29:53 EDT 2020" docASTNodeCount="1311" docActiveCodeLength="6779" docExpressionCount="912" docLength="8917" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5096750">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDUTIL.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[
import java.util.ArrayList;
import java.util.List;

import gradingTools.comp524f20.assignment1.WekaUtil;

public class SDUTIL{

	/**
	If the combination of the method parameters is safe, based on the given data,  the function returns true. Otherwise, it returns false.
	  */
	public static boolean isGivenSafe(int dist, int durat, int exhal)
	{
		
		for(int i=0; i<safeInteractions.size();i++)
		{
			if(safeInteractions.get(i)[0] == dist && safeInteractions.get(i)[1] == durat && safeInteractions.get(i)[2] == exhal) 
			{
				return true;
			}
		}
		return false;
	}
	
	// interpolate function
	public static int interpolate(int lo,int hi, int n, int y1, int y2) {
		float a = ((float)y1+((((float)n-(float)lo)/((float)hi-(float)lo))*(float)(y2-y1)));
		return Math.round(a);
	}
	
	/**
	 the three parameters represent distance, duration, and exhalation level. The
	function interpolates each of the parameters to a value in Table 2, and determines if the
	interpolated values are safe based on whether they occur in Table 2. Returns true if safe.
	 **/
	public static boolean isInterpolatedSafe(int dist,int durat,int exhal)
	{
		int dist_intrp; 
		int durat_intrp; 
		int exhal_intrp;
		//dist
		if(dist >= 6 && dist <= 13) dist_intrp = interpolate(6, 13, dist, 1, 2);
		else if(dist >= 13 && dist <= 27) dist_intrp = interpolate(13, 27, dist, 2, 3);
		else if(dist > 27) dist_intrp = 3;
		else dist_intrp = 1;
		//durat
		if(durat >= 15 && durat <= 30) durat_intrp = interpolate(15, 30, durat, 1, 2);
		else if(durat >= 30 && durat <= 120) durat_intrp = interpolate(30, 120, durat, 2, 3);
		else if(durat > 120) durat_intrp = 3;
		else durat_intrp = 1;
		//exhal
		if(exhal >= 10 && exhal <= 30) exhal_intrp = interpolate(10, 30, exhal, 1, 2);
		else if(exhal >= 30 && exhal <= 50) exhal_intrp = interpolate(30, 50, exhal, 2, 3);
		else if(exhal > 50) exhal_intrp = 3;
		else exhal_intrp = 1;
		
		if (dist_intrp == 1) dist = 6;
		if (dist_intrp == 2) dist = 13;
		if (dist_intrp == 3) dist = 27;
		if (durat_intrp == 1) durat = 15;
		if (durat_intrp == 2) durat = 30;
		if (durat_intrp == 3) durat = 120;
		if (exhal_intrp == 1) exhal = 10;
		if (exhal_intrp == 2) exhal = 30;
		if (exhal_intrp == 3) exhal = 50;
		
		return SDUTIL.isGivenSafe(dist, durat, exhal);
	}
	
	// two parameter
	public static boolean isInterpolatedSafe(int dist,int durat) 
	{
		return SDUTIL.isInterpolatedSafe(dist, durat, 30);
	}
	
	// one parameter
	public static boolean isInterpolatdSafe(int dist) 
	{
		return SDUTIL.isInterpolatedSafe(dist, 30);
	}
	
	/**
	It uses Math.random() function to generate a distance, duration, and exhalation level
	combination.
	It determines whether this combination is safe based on the isDerivedSafe() function
	described below
	It prints the (distance, duration, exhalation level, and safety) tuple, using a comma to
	separate the elements of the 4-tuple.
	**/
	public static void printGeneratedCombinationDerivedSafety() 
	{
		int dist = (int)(Math.random()*100);
		int durat = (int)(Math.random()*200);
		int exhal = (int)(Math.random()*100);
		
		String[] tuple = {Integer.toString(dist),Integer.toString(durat),Integer.toString(exhal),Boolean.toString(isDerivedSafe(dist, durat, exhal))};
		
		System.out.println(tuple[0]+","+tuple[1]+","+tuple[2]+","+tuple[3]);
	}
	
	/**
	It prints the following header:

	Distance,Duration,Exhalation,IsSafe

	For each 3-tuple combination in Table 2, it adds the Boolean true to create a 4-tuple combination and prints the 4-tuple, again using a comma to separate the elements of the tuple.

	It prints a separator line with one or more hyphens.

	It then calls printGeneratedCombinationDerivedSafety() ten times.

	**/
	public static void printGivenAndGeneratedCombinationsDerivedSafety() 
	{ 
		System.out.println("Distance,Duration,Exhalation,IsSafe");
		System.out.println("	13,30,30,true");
		System.out.println("	6,30,10,true");
		System.out.println("	27,30,50,true");
		System.out.println("	13,15,50,true");
		System.out.println("	13,120,10,true");
		System.out.println("	27,120,30,true");
		System.out.println("	6,15,30,true");
		System.out.println("----------------");
		for (int i=0; i<10; i++) {
			printGeneratedCombinationDerivedSafety();
		}
	}
	
	/**
	The procedure computes a (possibly empty) list of given safe distance and duration pairs that are associated with an interpolation of the exhalation level in Table 2.

	Each pair is returned by a two-element array whose first element is the distance and second element is the duration.

	**/
	static List<Integer[]> safeInteractions = new ArrayList<Integer[]>(){{
        add(new Integer[]{13,30,30});
        add(new Integer[]{6,30,10});
        add(new Integer[]{27,30,50});
        add(new Integer[]{13,15,50});
        add(new Integer[]{13,120,10});
        add(new Integer[]{27,120,30});
        add(new Integer[]{6,15,30});
          }};
	
	public static List<Integer[]> generateSafeDistancesAndDurations(int exhal)
	{
		List<Integer[]> pairs = new ArrayList<Integer[]>();
		for(int i=0; i<safeInteractions.size();i++)
		{
			if(exhal == safeInteractions.get(i)[2]) {
				pairs.add(safeInteractions.get(i));
			}
		}
		return pairs;
	}
	
	/**
	Helper method to print out the the multiple pairs of distance and duration into one big string and return it
	**/
	public static String toString(List<Integer[]> pairs)
	{
		String ts = "[";
		for(int i = 0; i < pairs.size(); i++)
		{
			ts += "{" + pairs.get(i)[0].toString() + "," + pairs.get(i)[1].toString()+ "}";
        }
		return ts += "]";
		
	}
	
	/**
	The parameter is an exhalation-level. It uses the method above to determine the list of safe distances and durations for the passed exhalation-level and 
	prints the passed exhalation level together with the returned list using the format below:

	<exhalation level>, [{<destination,duration1}, … {<destination>, <duration>}]

	**/
	public static void printSafeDistancesAndDurations(int exhal) 
	{
		System.out.println(exhal + "," + toString(generateSafeDistancesAndDurations(exhal)));
	}
	
	/**
	It returns true if the combination of these three parameters is safer than at least one of the combinations in the table.
	**/
	public static boolean isDerivedSafe(int dist, int durat, int exhal)
	{
		List<Integer[]> pairs = generateSafeDistancesAndDurations(exhal);
		for(int i = 0; i < pairs.size(); i++)
		{
			if(dist >= pairs.get(i)[0] && durat <= pairs.get(i)[1])
			{
				return true;
			}
        }
		return false;
		
		
	}
	
	public static Boolean isInferredSafe(int dist, int durat, int exhal) {
		final String TRUE = "true";
		final String FALSE = "false";
		final String[] featureNames = {"distance", "duration","exhalation"};
		final String resultAttributeName = "safe";
		final String[] resultValueNames = {TRUE,FALSE};
		double[] inputValues = {dist, durat, exhal};
		String resultString = WekaUtil.predictString(ClassifierFactory.getSingleton(), featureNames, inputValues, resultAttributeName, resultValueNames);
		return TRUE.equals(resultString)?true:false;
	}
	
	public static void printGeneratedCombinationInferredSafety() 
	{
		int dist = (int)(Math.random()*100);
		int durat = (int)(Math.random()*200);
		int exhal = (int)(Math.random()*100);
		
		String[] tuple = {Integer.toString(dist),Integer.toString(durat),Integer.toString(exhal),Boolean.toString(isInferredSafe(dist, durat, exhal))};
		
		System.out.println(tuple[0]+","+tuple[1]+","+tuple[2]+","+tuple[3]);
	}
	
	public static void printGivenAndGeneratedCombinationsInferredSafety()
	{
		System.out.println("Distance,Duration,Exhalation,IsSafe");
		System.out.println("	13,30,30,true");
		System.out.println("	6,30,10,true");
		System.out.println("	27,30,50,true");
		System.out.println("	13,15,50,true");
		System.out.println("	13,120,10,true");
		System.out.println("	27,120,30,true");
		System.out.println("	6,15,30,true");
		System.out.println("----------------");
		for (int i=0; i<10; i++) {
			printGeneratedCombinationInferredSafety();
		}
	}
	
	public static void printGeneratedCombination()
	{
		int dist = (int)(Math.random()*100);
		int durat = (int)(Math.random()*200);
		int exhal = (int)(Math.random()*100);
		
		String[] tuple = {Integer.toString(dist),Integer.toString(durat),Integer.toString(exhal),Boolean.toString(isDerivedSafe(dist, durat, exhal)),Boolean.toString(isInferredSafe(dist, durat, exhal))};
		
		System.out.println(tuple[0]+","+tuple[1]+","+tuple[2]+","+tuple[3]+","+tuple[4]);
	}
	
	public static void compareSafetyComputations()
	{
		System.out.println("Distance,Duration,Exhalation,Derived,Inferred");
		for (int i=0; i<10; i++) {
			printGeneratedCombination();
		}
	}
	
	
	
	
	
	
	
	
	
	
}
]]></snapshot>
  </Command>
  <Command __id="95" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:31:36 EDT 2020" docASTNodeCount="78" docActiveCodeLength="527" docExpressionCount="30" docLength="572" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5200649">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDModel.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[
import java.beans.PropertyChangeListener; // type of an observer of editable properties
public interface SDModel {
	public static final String Distance = "distance";
	public static final String Duration = "duration";
	public static final String ExhalationLevel = "exhalation level";
	public static final String Safe = "safe";
	
	int getDistance();
	int getDuration();
	int getExhalation();
	Boolean isSafe();
	
	void setInteraction(int distance, int duration, int exhalation_level);
	void addPropertyChangeListener(PropertyChangeListener aListener);
	
}
]]></snapshot>
  </Command>
  <Command __id="97" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:31:39 EDT 2020" docASTNodeCount="12" docActiveCodeLength="105" docExpressionCount="7" docLength="105" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5202886">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDView.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[
import java.beans.PropertyChangeListener;

public interface SDView extends PropertyChangeListener{
}]]></snapshot>
  </Command>
  <Command __id="99" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:31:41 EDT 2020" docASTNodeCount="78" docActiveCodeLength="527" docExpressionCount="30" docLength="572" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5205084">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶import java.beans.PropertyChangeListener; // type of an observer of editable properties¶public interface SDModel {¶	public static final String Distance = "distance";¶	public static final String Duration = "duration";¶	public static final String ExhalationLevel = "exhalation level";¶	public static final String Safe = "safe";¶	¶	int getDistance();¶	int getDuration();¶	int getExhalation();¶	Boolean isSafe();¶	¶	void setInteraction(int distance, int duration, int exhalation_level);¶	void addPropertyChangeListener(PropertyChangeListener aListener);¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="101" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:31:44 EDT 2020" docASTNodeCount="128" docActiveCodeLength="730" docExpressionCount="89" docLength="730" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5207746">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDController.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[

import java.util.Scanner;

public class SDController{

	public void processInput()
	{
		int dist = 0; 
		int durat = 0;
		int exhal = 0;
		
		Scanner input = new Scanner(System.in);
		
		while(true)
		{
			System.out.println("Please enter data regarding your guest interaction.");
			System.out.println("Distance?");
			dist = input.nextInt();
			if(dist == -1) break;
			System.out.println("Duration?");
			durat = input.nextInt();
			if(durat == -1) break;
			System.out.println("Exhalation Level?");
			exhal = input.nextInt();
			if(exhal == -1) break;
			
			SDModelFactory.getSingleton().setInteraction(dist, durat, exhal);
			
		}
		System.out.println("Quitting");
		input.close();
	}
}
]]></snapshot>
  </Command>
  <Command __id="103" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:31:55 EDT 2020" docASTNodeCount="43" docActiveCodeLength="318" docExpressionCount="19" docLength="318" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5219406">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDControllerFactory.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[

public class SDControllerFactory {
	
	static SDController Singleton;
	
	public static SDController getSingleton() 
	{
		if(Singleton == null) Singleton = new SDController();
		return Singleton;
	}
	
	public static void setSingleton(SDController newController)
	{
		Singleton = newController;
	}

}
]]></snapshot>
  </Command>
  <Command __id="94" _type="ShellCommand" date="Thu Oct 01 13:31:36 EDT 2020" starttimestamp="1601568296309" timestamp="5200185" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="96" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:31:37 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5200908" />
  <Command __id="98" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:31:39 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5203053" />
  <Command __id="100" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:31:41 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5205290" />
  <Command __id="102" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:31:44 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5208084" />
  <Command __id="104" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:31:55 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5219588" />
  <Command __id="106" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:32:01 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5225202" />
  <Command __id="108" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:32:02 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5225937" />
  <Command __id="109" _type="ShellCommand" date="Thu Oct 01 13:32:06 EDT 2020" starttimestamp="1601568296309" timestamp="5229815" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="105" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:32:01 EDT 2020" docASTNodeCount="43" docActiveCodeLength="290" docExpressionCount="19" docLength="302" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5225038">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDModelFactory.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[
public class SDModelFactory {
	
	// Singleton
	static SDModel Singleton;
	
	public static SDModel getSingleton() 
	{
		if(Singleton == null) Singleton = new AppModelBasic();
		return Singleton;
	}
	
	public static void setSingleton(SDModel newModel)
	{
		Singleton = newModel;
	}

}
]]></snapshot>
  </Command>
  <Command __id="107" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:32:02 EDT 2020" docASTNodeCount="1311" docActiveCodeLength="6779" docExpressionCount="912" docLength="8917" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5225692">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDUTIL.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶import java.util.ArrayList;¶import java.util.List;¶¶import gradingTools.comp524f20.assignment1.WekaUtil;¶¶public class SDUTIL{¶¶	/**¶	If the combination of the method parameters is safe, based on the given data,  the function returns true. Otherwise, it returns false.¶	  */¶	public static boolean isGivenSafe(int dist, int durat, int exhal)¶	{¶		¶		for(int i=0; i<safeInteractions.size();i++)¶		{¶			if(safeInteractions.get(i)[0] == dist && safeInteractions.get(i)[1] == durat && safeInteractions.get(i)[2] == exhal) ¶			{¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	// interpolate function¶	public static int interpolate(int lo,int hi, int n, int y1, int y2) {¶		float a = ((float)y1+((((float)n-(float)lo)/((float)hi-(float)lo))*(float)(y2-y1)));¶		return Math.round(a);¶	}¶	¶	/**¶	 the three parameters represent distance, duration, and exhalation level. The¶	function interpolates each of the parameters to a value in Table 2, and determines if the¶	interpolated values are safe based on whether they occur in Table 2. Returns true if safe.¶	 **/¶	public static boolean isInterpolatedSafe(int dist,int durat,int exhal)¶	{¶		int dist_intrp; ¶		int durat_intrp; ¶		int exhal_intrp;¶		//dist¶		if(dist >= 6 && dist <= 13) dist_intrp = interpolate(6, 13, dist, 1, 2);¶		else if(dist >= 13 && dist <= 27) dist_intrp = interpolate(13, 27, dist, 2, 3);¶		else if(dist > 27) dist_intrp = 3;¶		else dist_intrp = 1;¶		//durat¶		if(durat >= 15 && durat <= 30) durat_intrp = interpolate(15, 30, durat, 1, 2);¶		else if(durat >= 30 && durat <= 120) durat_intrp = interpolate(30, 120, durat, 2, 3);¶		else if(durat > 120) durat_intrp = 3;¶		else durat_intrp = 1;¶		//exhal¶		if(exhal >= 10 && exhal <= 30) exhal_intrp = interpolate(10, 30, exhal, 1, 2);¶		else if(exhal >= 30 && exhal <= 50) exhal_intrp = interpolate(30, 50, exhal, 2, 3);¶		else if(exhal > 50) exhal_intrp = 3;¶		else exhal_intrp = 1;¶		¶		if (dist_intrp == 1) dist = 6;¶		if (dist_intrp == 2) dist = 13;¶		if (dist_intrp == 3) dist = 27;¶		if (durat_intrp == 1) durat = 15;¶		if (durat_intrp == 2) durat = 30;¶		if (durat_intrp == 3) durat = 120;¶		if (exhal_intrp == 1) exhal = 10;¶		if (exhal_intrp == 2) exhal = 30;¶		if (exhal_intrp == 3) exhal = 50;¶		¶		return SDUTIL.isGivenSafe(dist, durat, exhal);¶	}¶	¶	// two parameter¶	public static boolean isInterpolatedSafe(int dist,int durat) ¶	{¶		return SDUTIL.isInterpolatedSafe(dist, durat, 30);¶	}¶	¶	// one parameter¶	public static boolean isInterpolatdSafe(int dist) ¶	{¶		return SDUTIL.isInterpolatedSafe(dist, 30);¶	}¶	¶	/**¶	It uses Math.random() function to generate a distance, duration, and exhalation level¶	combination.¶	It determines whether this combination is safe based on the isDerivedSafe() function¶	described below¶	It prints the (distance, duration, exhalation level, and safety) tuple, using a comma to¶	separate the elements of the 4-tuple.¶	**/¶	public static void printGeneratedCombinationDerivedSafety() ¶	{¶		int dist = (int)(Math.random()*100);¶		int durat = (int)(Math.random()*200);¶		int exhal = (int)(Math.random()*100);¶		¶		String[] tuple = {Integer.toString(dist),Integer.toString(durat),Integer.toString(exhal),Boolean.toString(isDerivedSafe(dist, durat, exhal))};¶		¶		System.out.println(tuple[0]+","+tuple[1]+","+tuple[2]+","+tuple[3]);¶	}¶	¶	/**¶	It prints the following header:¶¶	Distance,Duration,Exhalation,IsSafe¶¶	For each 3-tuple combination in Table 2, it adds the Boolean true to create a 4-tuple combination and prints the 4-tuple, again using a comma to separate the elements of the tuple.¶¶	It prints a separator line with one or more hyphens.¶¶	It then calls printGeneratedCombinationDerivedSafety() ten times.¶¶	**/¶	public static void printGivenAndGeneratedCombinationsDerivedSafety() ¶	{ ¶		System.out.println("Distance,Duration,Exhalation,IsSafe");¶		System.out.println("	13,30,30,true");¶		System.out.println("	6,30,10,true");¶		System.out.println("	27,30,50,true");¶		System.out.println("	13,15,50,true");¶		System.out.println("	13,120,10,true");¶		System.out.println("	27,120,30,true");¶		System.out.println("	6,15,30,true");¶		System.out.println("----------------");¶		for (int i=0; i<10; i++) {¶			printGeneratedCombinationDerivedSafety();¶		}¶	}¶	¶	/**¶	The procedure computes a (possibly empty) list of given safe distance and duration pairs that are associated with an interpolation of the exhalation level in Table 2.¶¶	Each pair is returned by a two-element array whose first element is the distance and second element is the duration.¶¶	**/¶	static List<Integer[]> safeInteractions = new ArrayList<Integer[]>(){{¶        add(new Integer[]{13,30,30});¶        add(new Integer[]{6,30,10});¶        add(new Integer[]{27,30,50});¶        add(new Integer[]{13,15,50});¶        add(new Integer[]{13,120,10});¶        add(new Integer[]{27,120,30});¶        add(new Integer[]{6,15,30});¶          }};¶	¶	public static List<Integer[]> generateSafeDistancesAndDurations(int exhal)¶	{¶		List<Integer[]> pairs = new ArrayList<Integer[]>();¶		for(int i=0; i<safeInteractions.size();i++)¶		{¶			if(exhal == safeInteractions.get(i)[2]) {¶				pairs.add(safeInteractions.get(i));¶			}¶		}¶		return pairs;¶	}¶	¶	/**¶	Helper method to print out the the multiple pairs of distance and duration into one big string and return it¶	**/¶	public static String toString(List<Integer[]> pairs)¶	{¶		String ts = "[";¶		for(int i = 0; i < pairs.size(); i++)¶		{¶			ts += "{" + pairs.get(i)[0].toString() + "," + pairs.get(i)[1].toString()+ "}";¶        }¶		return ts += "]";¶		¶	}¶	¶	/**¶	The parameter is an exhalation-level. It uses the method above to determine the list of safe distances and durations for the passed exhalation-level and ¶	prints the passed exhalation level together with the returned list using the format below:¶¶	<exhalation level>, [{<destination,duration1}, … {<destination>, <duration>}]¶¶	**/¶	public static void printSafeDistancesAndDurations(int exhal) ¶	{¶		System.out.println(exhal + "," + toString(generateSafeDistancesAndDurations(exhal)));¶	}¶	¶	/**¶	It returns true if the combination of these three parameters is safer than at least one of the combinations in the table.¶	**/¶	public static boolean isDerivedSafe(int dist, int durat, int exhal)¶	{¶		List<Integer[]> pairs = generateSafeDistancesAndDurations(exhal);¶		for(int i = 0; i < pairs.size(); i++)¶		{¶			if(dist >= pairs.get(i)[0] && durat <= pairs.get(i)[1])¶			{¶				return true;¶			}¶        }¶		return false;¶		¶		¶	}¶	¶	public static Boolean isInferredSafe(int dist, int durat, int exhal) {¶		final String TRUE = "true";¶		final String FALSE = "false";¶		final String[] featureNames = {"distance", "duration","exhalation"};¶		final String resultAttributeName = "safe";¶		final String[] resultValueNames = {TRUE,FALSE};¶		double[] inputValues = {dist, durat, exhal};¶		String resultString = WekaUtil.predictString(ClassifierFactory.getSingleton(), featureNames, inputValues, resultAttributeName, resultValueNames);¶		return TRUE.equals(resultString)?true:false;¶	}¶	¶	public static void printGeneratedCombinationInferredSafety() ¶	{¶		int dist = (int)(Math.random()*100);¶		int durat = (int)(Math.random()*200);¶		int exhal = (int)(Math.random()*100);¶		¶		String[] tuple = {Integer.toString(dist),Integer.toString(durat),Integer.toString(exhal),Boolean.toString(isInferredSafe(dist, durat, exhal))};¶		¶		System.out.println(tuple[0]+","+tuple[1]+","+tuple[2]+","+tuple[3]);¶	}¶	¶	public static void printGivenAndGeneratedCombinationsInferredSafety()¶	{¶		System.out.println("Distance,Duration,Exhalation,IsSafe");¶		System.out.println("	13,30,30,true");¶		System.out.println("	6,30,10,true");¶		System.out.println("	27,30,50,true");¶		System.out.println("	13,15,50,true");¶		System.out.println("	13,120,10,true");¶		System.out.println("	27,120,30,true");¶		System.out.println("	6,15,30,true");¶		System.out.println("----------------");¶		for (int i=0; i<10; i++) {¶			printGeneratedCombinationInferredSafety();¶		}¶	}¶	¶	public static void printGeneratedCombination()¶	{¶		int dist = (int)(Math.random()*100);¶		int durat = (int)(Math.random()*200);¶		int exhal = (int)(Math.random()*100);¶		¶		String[] tuple = {Integer.toString(dist),Integer.toString(durat),Integer.toString(exhal),Boolean.toString(isDerivedSafe(dist, durat, exhal)),Boolean.toString(isInferredSafe(dist, durat, exhal))};¶		¶		System.out.println(tuple[0]+","+tuple[1]+","+tuple[2]+","+tuple[3]+","+tuple[4]);¶	}¶	¶	public static void compareSafetyComputations()¶	{¶		System.out.println("Distance,Duration,Exhalation,Derived,Inferred");¶		for (int i=0; i<10; i++) {¶			printGeneratedCombination();¶		}¶	}¶	¶	¶	¶	¶	¶	¶	¶	¶	¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="110" _type="ShellCommand" date="Thu Oct 01 13:36:27 EDT 2020" starttimestamp="1601568296309" timestamp="5491443" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="111" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:36:31 EDT 2020" docASTNodeCount="37" docActiveCodeLength="271" docExpressionCount="24" docLength="271" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5494934">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\AppModelBasic.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[
public class AppModelBasic extends AppModelAbstract {

	@Override
	public Boolean isSafe() {
		Boolean k = SDUTIL.isGivenSafe(getDistance(), getDuration(), getExhalation());
		propertyChangeSupport.firePropertyChange(Safe, null, k);
		return k;
		
	}



}
]]></snapshot>
  </Command>
  <Command __id="112" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:36:31 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5495142" />
  <Command __id="114" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:36:36 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5500084" />
  <Command __id="115" _type="ShellCommand" date="Thu Oct 01 13:36:39 EDT 2020" starttimestamp="1601568296309" timestamp="5502973" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="116" _type="ShellCommand" date="Thu Oct 01 13:37:43 EDT 2020" starttimestamp="1601568296309" timestamp="5567676" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="118" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:37:44 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5568143" />
  <Command __id="119" _type="ShellCommand" date="Thu Oct 01 13:37:46 EDT 2020" starttimestamp="1601568296309" timestamp="5570110" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="120" _type="ShellCommand" date="Thu Oct 01 13:38:02 EDT 2020" starttimestamp="1601568296309" timestamp="5586082" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="122" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:38:02 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5586398" />
  <Command __id="123" _type="ShellCommand" date="Thu Oct 01 13:38:05 EDT 2020" starttimestamp="1601568296309" timestamp="5589181" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="113" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:36:36 EDT 2020" docASTNodeCount="224" docActiveCodeLength="1473" docExpressionCount="141" docLength="1473" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5499805">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\AppModelAbstract.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

public abstract class AppModelAbstract implements SDModel {
	
	private Object distance=null;
	private Object duration=null;
	private Object exhalation=null;
	
	@Override
	public int getDistance() {
		return (int) this.distance;
	}

	@Override
	public int getDuration() {
		return (int) this.duration;
	}

	@Override
	public int getExhalation() {
		return (int) this.exhalation;
	}

	
	public PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);
	public void addPropertyChangeListener(PropertyChangeListener aListener) {
		propertyChangeSupport.addPropertyChangeListener(aListener);
	}
	
	public void reset() {
		this.distance =null;
		this.duration =null;
		this.exhalation =null;
	}

	
	@Override
	public void setInteraction(int distance, int duration, int exhalation_level) {
		Object oldDistance = this.distance;
		Object oldDuration = this.duration;
		Object oldExhalation = this.exhalation;
		this.distance = distance;
		this.duration = duration;
		this.exhalation = exhalation_level;
		propertyChangeSupport.firePropertyChange(SDModel.Distance, oldDistance, this.distance);
		propertyChangeSupport.firePropertyChange(SDModel.Duration, oldDuration, this.duration);
		propertyChangeSupport.firePropertyChange(SDModel.ExhalationLevel, oldExhalation, this.exhalation );
		this.isSafe();
		reset();
	}

}
]]></snapshot>
  </Command>
  <Command __id="117" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:37:44 EDT 2020" docASTNodeCount="78" docActiveCodeLength="527" docExpressionCount="30" docLength="572" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5567962">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶import java.beans.PropertyChangeListener; // type of an observer of editable properties¶public interface SDModel {¶	public static final String Distance = "distance";¶	public static final String Duration = "duration";¶	public static final String ExhalationLevel = "exhalation level";¶	public static final String Safe = "safe";¶	¶	int getDistance();¶	int getDuration();¶	int getExhalation();¶	Boolean isSafe();¶	¶	void setInteraction(int distance, int duration, int exhalation_level);¶	void addPropertyChangeListener(PropertyChangeListener aListener);¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="121" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:38:02 EDT 2020" docASTNodeCount="224" docActiveCodeLength="1473" docExpressionCount="141" docLength="1473" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5586271">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\AppModelAbstract.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶public abstract class AppModelAbstract implements SDModel {¶	¶	private Object distance=null;¶	private Object duration=null;¶	private Object exhalation=null;¶	¶	@Override¶	public int getDistance() {¶		return (int) this.distance;¶	}¶¶	@Override¶	public int getDuration() {¶		return (int) this.duration;¶	}¶¶	@Override¶	public int getExhalation() {¶		return (int) this.exhalation;¶	}¶¶	¶	public PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);¶	public void addPropertyChangeListener(PropertyChangeListener aListener) {¶		propertyChangeSupport.addPropertyChangeListener(aListener);¶	}¶	¶	public void reset() {¶		this.distance =null;¶		this.duration =null;¶		this.exhalation =null;¶	}¶¶	¶	@Override¶	public void setInteraction(int distance, int duration, int exhalation_level) {¶		Object oldDistance = this.distance;¶		Object oldDuration = this.duration;¶		Object oldExhalation = this.exhalation;¶		this.distance = distance;¶		this.duration = duration;¶		this.exhalation = exhalation_level;¶		propertyChangeSupport.firePropertyChange(SDModel.Distance, oldDistance, this.distance);¶		propertyChangeSupport.firePropertyChange(SDModel.Duration, oldDuration, this.duration);¶		propertyChangeSupport.firePropertyChange(SDModel.ExhalationLevel, oldExhalation, this.exhalation );¶		this.isSafe();¶		reset();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="125" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:38:14 EDT 2020" docASTNodeCount="78" docActiveCodeLength="527" docExpressionCount="30" docLength="572" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5598581">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶import java.beans.PropertyChangeListener; // type of an observer of editable properties¶public interface SDModel {¶	public static final String Distance = "distance";¶	public static final String Duration = "duration";¶	public static final String ExhalationLevel = "exhalation level";¶	public static final String Safe = "safe";¶	¶	int getDistance();¶	int getDuration();¶	int getExhalation();¶	Boolean isSafe();¶	¶	void setInteraction(int distance, int duration, int exhalation_level);¶	void addPropertyChangeListener(PropertyChangeListener aListener);¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="124" _type="ShellCommand" date="Thu Oct 01 13:38:14 EDT 2020" starttimestamp="1601568296309" timestamp="5598370" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="126" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:38:14 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5598690" />
  <Command __id="128" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:38:18 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5602643" />
  <Command __id="129" _type="ShellCommand" date="Thu Oct 01 13:38:21 EDT 2020" starttimestamp="1601568296309" timestamp="5604989" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="130" _type="ShellCommand" date="Thu Oct 01 13:38:59 EDT 2020" starttimestamp="1601568296309" timestamp="5642815" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="132" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:38:59 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="5643135" />
  <Command __id="133" _type="ShellCommand" date="Thu Oct 01 13:39:01 EDT 2020" starttimestamp="1601568296309" timestamp="5645103" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="127" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:38:18 EDT 2020" docASTNodeCount="224" docActiveCodeLength="1473" docExpressionCount="141" docLength="1473" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5602535">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\AppModelAbstract.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶public abstract class AppModelAbstract implements SDModel {¶	¶	private Object distance=null;¶	private Object duration=null;¶	private Object exhalation=null;¶	¶	@Override¶	public int getDistance() {¶		return (int) this.distance;¶	}¶¶	@Override¶	public int getDuration() {¶		return (int) this.duration;¶	}¶¶	@Override¶	public int getExhalation() {¶		return (int) this.exhalation;¶	}¶¶	¶	public PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);¶	public void addPropertyChangeListener(PropertyChangeListener aListener) {¶		propertyChangeSupport.addPropertyChangeListener(aListener);¶	}¶	¶	public void reset() {¶		this.distance =null;¶		this.duration =null;¶		this.exhalation =null;¶	}¶¶	¶	@Override¶	public void setInteraction(int distance, int duration, int exhalation_level) {¶		Object oldDistance = this.distance;¶		Object oldDuration = this.duration;¶		Object oldExhalation = this.exhalation;¶		this.distance = distance;¶		this.duration = duration;¶		this.exhalation = exhalation_level;¶		propertyChangeSupport.firePropertyChange(SDModel.Distance, oldDistance, this.distance);¶		propertyChangeSupport.firePropertyChange(SDModel.Duration, oldDuration, this.duration);¶		propertyChangeSupport.firePropertyChange(SDModel.ExhalationLevel, oldExhalation, this.exhalation );¶		this.isSafe();¶		reset();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="131" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:38:59 EDT 2020" docASTNodeCount="78" docActiveCodeLength="527" docExpressionCount="30" docLength="572" projectName="COMP 524" starttimestamp="1601568296309" timestamp="5642999">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDModel.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶import java.beans.PropertyChangeListener; // type of an observer of editable properties¶public interface SDModel {¶	public static final String Distance = "distance";¶	public static final String Duration = "duration";¶	public static final String ExhalationLevel = "exhalation level";¶	public static final String Safe = "safe";¶	¶	int getDistance();¶	int getDuration();¶	int getExhalation();¶	Boolean isSafe();¶	¶	void setInteraction(int distance, int duration, int exhalation_level);¶	void addPropertyChangeListener(PropertyChangeListener aListener);¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="134" _type="ShellCommand" date="Thu Oct 01 13:47:03 EDT 2020" starttimestamp="1601568296309" timestamp="6126856" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="135" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:47:06 EDT 2020" docASTNodeCount="12" docActiveCodeLength="105" docExpressionCount="7" docLength="105" projectName="COMP 524" starttimestamp="1601568296309" timestamp="6129858">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDView.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶import java.beans.PropertyChangeListener;¶¶public interface SDView extends PropertyChangeListener{¶}")]]]></diff>
  </Command>
  <Command __id="136" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:47:06 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="6130001" />
  <Command __id="138" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:47:10 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="6134090" />
  <Command __id="139" _type="ShellCommand" date="Thu Oct 01 13:47:21 EDT 2020" starttimestamp="1601568296309" timestamp="6144985" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="137" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:47:10 EDT 2020" docASTNodeCount="68" docActiveCodeLength="438" docExpressionCount="46" docLength="438" projectName="COMP 524" starttimestamp="1601568296309" timestamp="6133926">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDAppView.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class SDAppView implements SDView,PropertyChangeListener {
	public void propertyChange(PropertyChangeEvent evt) {
		System.out.println(evt.toString());
		if(evt.getPropertyName().equals("safe")) {
			if((boolean) evt.getNewValue()) {
				System.out.println("Safe.");
			} else {
				System.out.println("Not Safe!");
			}
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="140" _type="ShellCommand" date="Thu Oct 01 13:48:24 EDT 2020" starttimestamp="1601568296309" timestamp="6207821" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="142" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 13:48:26 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="6209925" />
  <Command __id="143" _type="ShellCommand" date="Thu Oct 01 13:48:42 EDT 2020" starttimestamp="1601568296309" timestamp="6226675" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="141" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 13:48:26 EDT 2020" docASTNodeCount="43" docActiveCodeLength="265" docExpressionCount="19" docLength="265" projectName="COMP 524" starttimestamp="1601568296309" timestamp="6209745">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDViewFactory.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[

public class SDViewFactory {
	
	static SDView sDView;
	
	public static  SDView getSingleton() 
	{
		if(sDView == null) sDView = new SDAppView();
		return sDView;
	}
	
	public static void setSingleton(SDView newView)
	{
		sDView = newView;
	}

}
]]></snapshot>
  </Command>
  <Command __id="146" _type="ShellCommand" date="Thu Oct 01 14:18:58 EDT 2020" starttimestamp="1601568296309" timestamp="8042454" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="147" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 14:19:01 EDT 2020" docASTNodeCount="68" docActiveCodeLength="438" docExpressionCount="46" docLength="438" projectName="COMP 524" starttimestamp="1601568296309" timestamp="8045574">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDAppView.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶¶public class SDAppView implements SDView,PropertyChangeListener {¶	public void propertyChange(PropertyChangeEvent evt) {¶		System.out.println(evt.toString());¶		if(evt.getPropertyName().equals("safe")) {¶			if((boolean) evt.getNewValue()) {¶				System.out.println("Safe.");¶			} else {¶				System.out.println("Not Safe!");¶			}¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="148" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 14:19:02 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="8045699" />
  <Command __id="149" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 14:19:03 EDT 2020" docASTNodeCount="224" docActiveCodeLength="1473" docExpressionCount="141" docLength="1473" projectName="COMP 524" starttimestamp="1601568296309" timestamp="8047530">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\AppModelAbstract.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶¶public abstract class AppModelAbstract implements SDModel {¶	¶	private Object distance=null;¶	private Object duration=null;¶	private Object exhalation=null;¶	¶	@Override¶	public int getDistance() {¶		return (int) this.distance;¶	}¶¶	@Override¶	public int getDuration() {¶		return (int) this.duration;¶	}¶¶	@Override¶	public int getExhalation() {¶		return (int) this.exhalation;¶	}¶¶	¶	public PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);¶	public void addPropertyChangeListener(PropertyChangeListener aListener) {¶		propertyChangeSupport.addPropertyChangeListener(aListener);¶	}¶	¶	public void reset() {¶		this.distance =null;¶		this.duration =null;¶		this.exhalation =null;¶	}¶¶	¶	@Override¶	public void setInteraction(int distance, int duration, int exhalation_level) {¶		Object oldDistance = this.distance;¶		Object oldDuration = this.duration;¶		Object oldExhalation = this.exhalation;¶		this.distance = distance;¶		this.duration = duration;¶		this.exhalation = exhalation_level;¶		propertyChangeSupport.firePropertyChange(SDModel.Distance, oldDistance, this.distance);¶		propertyChangeSupport.firePropertyChange(SDModel.Duration, oldDuration, this.duration);¶		propertyChangeSupport.firePropertyChange(SDModel.ExhalationLevel, oldExhalation, this.exhalation );¶		this.isSafe();¶		reset();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="150" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 14:19:03 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="8047661" />
  <Command __id="151" _type="DiffBasedFileOpenCommand" date="Thu Oct 01 14:19:04 EDT 2020" docASTNodeCount="68" docActiveCodeLength="438" docExpressionCount="46" docLength="438" projectName="COMP 524" starttimestamp="1601568296309" timestamp="8047796">
    <filePath><![CDATA[E:\Users\Jackson\Desktop\SCHOOL\COMP\Assignment-1\src\COMP 524\src\SDAppView.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶¶public class SDAppView implements SDView,PropertyChangeListener {¶	public void propertyChange(PropertyChangeEvent evt) {¶		System.out.println(evt.toString());¶		if(evt.getPropertyName().equals("safe")) {¶			if((boolean) evt.getNewValue()) {¶				System.out.println("Safe.");¶			} else {¶				System.out.println("Not Safe!");¶			}¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="152" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 14:19:04 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="8048062" />
  <Command __id="154" _type="MoveCaretCommand" caretOffset="0" date="Thu Oct 01 14:19:06 EDT 2020" docOffset="0" starttimestamp="1601568296309" timestamp="8049943" />
  <Command __id="155" _type="ShellCommand" date="Thu Oct 01 14:19:09 EDT 2020" starttimestamp="1601568296309" timestamp="8052856" type="ECLIPSE_LOST_FOCUS" />
</Events>
